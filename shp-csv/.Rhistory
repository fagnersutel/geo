url<-"http://www2.census.gov/geo/tiger/TIGER2010DP1/County_2010Census_DP1.zip"
downloaddir<-"~/R-files/geo/dados/"
list.files()
destname<-"tiger.zip"
download.file(url, destname)
unzip(destname, exdir=downloaddir, junkpaths=TRUE)
library(OpenStreetMap)
filename<-list.files(downloaddir, pattern=".shp", full.names=FALSE)
filename
filename<-gsub(".shp", "", filename)
# ----- Read in shapefile (NAD83 coordinate system)
# ----- this is a fairly big shapefile and takes 1 minute to read
setwd("~/OneDrive/R-files/geo/dados/")
list.files()
dat<-readOGR(".", "County_2010Census_DP1")
# ----- Create a subset of New York counties
subdat<-dat[substring(dat$GEOID10, 1, 2) == "36",]
#https://andrewbtran.github.io/NICAR/2017/maps/shapes-and-gifs.html
library(tigris)
library(tidyverse)
library(lubridate)
install.packages('tigris')
install.packages('tidyverse')
install.packages('lubridate')
#https://andrewbtran.github.io/NICAR/2017/maps/shapes-and-gifs.html
library(tigris)
library(tidyverse)
library(lubridate)
usmap <- states(cb=T)
install.packages('tigris')
#https://andrewbtran.github.io/NICAR/2017/maps/shapes-and-gifs.html
library(tigris)
#https://andrewbtran.github.io/NICAR/2017/maps/shapes-and-gifs.html
library(tigris)
# load packages
library(rgdal)  # for vector work; sp package should always load with rgdal.
library (raster)   # for metadata/attributes- vectors or rasters
# Read the .csv file
plot.locations_HARV <-
read.csv("NEON-DS-Site-Layout-Files/HARV/HARV_PlotLocations.csv",
stringsAsFactors = FALSE)
## ----read-csv------------------------------------------------------------
setwd('~/OneDrive/r-files/geo/shp-csv/')
# Read the .csv file
plot.locations_HARV <-
read.csv("NEON-DS-Site-Layout-Files/HARV/HARV_PlotLocations.csv",
stringsAsFactors = FALSE)
# look at the data structure
str(plot.locations_HARV)
# view column names
names(plot.locations_HARV)
## ----check-out-coordinates-----------------------------------------------
# view first 6 rows of the X and Y columns
head(plot.locations_HARV$easting)
head(plot.locations_HARV$northing)
# note that  you can also call the same two columns using their COLUMN NUMBER
# view first 6 rows of the X and Y columns
head(plot.locations_HARV[,1])
head(plot.locations_HARV[,2])
## ----view-CRS-info-------------------------------------------------------
# view first 6 rows of the X and Y columns
head(plot.locations_HARV$geodeticDa)
head(plot.locations_HARV$utmZone)
# Import the line shapefile
lines_HARV <- readOGR( "NEON-DS-Site-Layout-Files/HARV/", "HARV_roads")
# view CRS
crs(lines_HARV)
# view extent
extent(lines_HARV)
## ----crs-object----------------------------------------------------------
# create crs object
utm18nCRS <- crs(lines_HARV)
utm18nCRS
class(utm18nCRS)
## ----convert-csv-shapefile-----------------------------------------------
# note that the easting and northing columns are in columns 1 and 2
plot.locationsSp_HARV <- SpatialPointsDataFrame(plot.locations_HARV[,1:2],
plot.locations_HARV,    #the R object to convert
proj4string = utm18nCRS)   # assign a CRS
# look at CRS
crs(plot.locationsSp_HARV)
## ----plot-data-points----------------------------------------------------
# plot spatial object
plot(plot.locationsSp_HARV,
main="Map of Plot Locations")
## ----create-aoi-boundary-------------------------------------------------
# create boundary object
aoiBoundary_HARV <- readOGR("NEON-DS-Site-Layout-Files/HARV/",
"HarClip_UTMZ18")
## ----plot-data-----------------------------------------------------------
# plot Boundary
plot(aoiBoundary_HARV,
main="AOI Boundary\nNEON Harvard Forest Field Site")
# add plot locations
plot(plot.locationsSp_HARV,
pch=8, add=TRUE)
# no plots added, why? CRS?
# view CRS of each
crs(aoiBoundary_HARV)
crs(plot.locationsSp_HARV)
## ----compare-extents-----------------------------------------------------
# view extent of each
extent(aoiBoundary_HARV)
extent(plot.locationsSp_HARV)
plot(extent(plot.locationsSp_HARV),
col="purple",
xlab="easting",
ylab="northing", lwd=8,
main="Extent Boundary of Plot Locations \nCompared to the AOI Spatial Object",
ylim=c(4712400,4714000)) # extent the y axis to make room for the legend
plot(extent(aoiBoundary_HARV),
add=TRUE,
lwd=6,
col="springgreen")
legend("bottomright",
#inset=c(-0.5,0),
legend=c("Layer One Extent", "Layer Two Extent"),
bty="n",
col=c("purple","springgreen"),
cex=.8,
lty=c(1,1),
lwd=6)
plotLoc.extent <- extent(plot.locationsSp_HARV)
plotLoc.extent
# grab the x and y min and max values from the spatial plot locations layer
xmin <- plotLoc.extent@xmin
xmax <- plotLoc.extent@xmax
ymin <- plotLoc.extent@ymin
ymax <- plotLoc.extent@ymax
# adjust the plot extent using x and ylim
plot(aoiBoundary_HARV,
main="NEON Harvard Forest Field Site\nModified Extent",
border="darkgreen",
xlim=c(xmin,xmax),
ylim=c(ymin,ymax))
plot(plot.locationsSp_HARV,
pch=8,
col="purple",
add=TRUE)
# add a legend
legend("bottomright",
legend=c("Plots", "AOI Boundary"),
pch=c(8,NA),
lty=c(NA,1),
bty="n",
col=c("purple","darkgreen"),
cex=.8)
## ----challenge-code-phen-plots, echo=FALSE, results="hide", warning=FALSE----
## 1
# Read the .csv file
newPlot.locations_HARV <-
read.csv("NEON-DS-Site-Layout-Files/HARV/HARV_2NewPhenPlots.csv",
stringsAsFactors = FALSE)
# look at the data structure -> locations in lat/long
str(newPlot.locations_HARV)
## 2
## Find/ establish a CRS for new points
# Import the US boundary which is in a geographic WGS84 coordinate system
Country.Boundary.US <- readOGR("NEON-DS-Site-Layout-Files/US-Boundary-Layers",
"US-Boundary-Dissolved-States")
# grab the geographic CRS
geogCRS <- crs(Country.Boundary.US)
geogCRS
## Convert to spatial data frame
# note that the easting and northing columns are in columns 1 and 2
newPlot.Sp.HARV <- SpatialPointsDataFrame(newPlot.locations_HARV[,2:1],
newPlot.locations_HARV,    # the R object to convert
proj4string = geogCRS)   # assign a CRS
# view CRS
crs(newPlot.Sp.HARV)
# remember we have a UTM Zone 18N crs object from previous code
utm18nCRS
# reproject the new points into UTM using `utm18nCRS`
newPlot.Sp.HARV.UTM <- spTransform(newPlot.Sp.HARV,
utm18nCRS)
# check new plot CRS
crs(newPlot.Sp.HARV.UTM)
## 3
# create plot
plot(plot.locationsSp_HARV,
main="NEON Harvard Forest Field Site \nPlot Locations" )
plot(newPlot.Sp.HARV.UTM,
add=TRUE, pch=20, col="darkgreen")
# oops - looks like we are missing a point on our new plot. let's compare
# the spatial extents of both objects!
extent(plot.locationsSp_HARV)
extent(newPlot.Sp.HARV.UTM)
# when you plot in base plot, if the extent isn't specified, then the data that
# is added FIRST will define the extent of the plot
plot(extent(plot.locationsSp_HARV),
main="Comparison of Spatial Object Extents\nPlot Locations vs New Plot Locations")
plot(extent(newPlot.Sp.HARV.UTM),
col="darkgreen",
add=TRUE)
originalPlotExtent <- extent(plot.locationsSp_HARV)
newPlotExtent <- extent(newPlot.Sp.HARV.UTM)
# set xmin and max
xmin <- originalPlotExtent@xmin
xmax <- originalPlotExtent@xmax
ymin <- originalPlotExtent@ymin
ymax <- newPlotExtent@ymax
# 3 again... re-plot
# try again but this time specify the x and ylims
# note: we could also write a function that would harvest the smallest and
# largest
# x and y values from an extent object. This is beyond the scope of this tutorial.
plot(plot.locationsSp_HARV,
main="NEON Harvard Forest Field Site\nVegetation & Phenology Plots",
pch=8,
col="purple",
xlim=c(xmin,xmax),
ylim=c(ymin,ymax))
plot(newPlot.Sp.HARV.UTM,
add=TRUE, pch=20, col="darkgreen")
# when we create a legend in R, we need to specify the text for each item
# listed in the legend.
legend("bottomright",
legend=c("Vegetation Plots", "Phenology Plots"),
pch=c(8,20),
bty="n",
col=c("purple","darkgreen"),
cex=1.3)
## ----write-shapefile, warnings="hide", eval=FALSE------------------------
## ----write-shapefile, warnings="hide", eval=FALSE------------------------
## # write a shapefile
## ----write-shapefile, warnings="hide", eval=FALSE------------------------
## # write a shapefile
## writeOGR(plot.locationsSp_HARV, getwd(),
## ----write-shapefile, warnings="hide", eval=FALSE------------------------
## # write a shapefile
## writeOGR(plot.locationsSp_HARV, getwd(),
##          "PlotLocations_HARV", driver="ESRI Shapefile")
# set working directory to data folder
setwd("~/OneDrive/r-files/geo/shp-csv/")
# Read the .csv file
plot.locations_HARV <-
read.csv("NEON-DS-Site-Layout-Files/HARV/HARV_PlotLocations.csv", stringsAsFactors = FALSE)
# look at the data structure
str(plot.locations_HARV)
# view column names
names(plot.locations_HARV)
# view first 6 rows of the X and Y columns
head(plot.locations_HARV$easting)
head(plot.locations_HARV$northing)
head(plot.locations_HARV[,1])
head(plot.locations_HARV[,2])
# view first 6 rows of the X and Y columns
head(plot.locations_HARV$geodeticDa)
head(plot.locations_HARV$utmZone)
# Import the line shapefile
lines_HARV <- readOGR( "NEON-DS-Site-Layout-Files/HARV/", "HARV_roads")
## OGR data source with driver: ESRI Shapefile
## Source: "NEON-DS-Site-Layout-Files/HARV/", layer: "HARV_roads"
## with 13 features
## It has 15 fields
# view CRS
crs(lines_HARV)
# view extent
extent(lines_HARV)
# create crs object
utm18nCRS <- crs(lines_HARV)
utm18nCRS
class(utm18nCRS)
# note that the easting and northing columns are in columns 1 and 2
plot.locationsSp_HARV <- SpatialPointsDataFrame(plot.locations_HARV[,1:2],
plot.locations_HARV,    #the R object to convert
proj4string = utm18nCRS)   # assign a CRS
# note that the easting and northing columns are in columns 1 and 2
plot.locationsSp_HARV <- SpatialPointsDataFrame(plot.locations_HARV[,1:2],
plot.locations_HARV,    #the R object to convert
proj4string = utm18nCRS)   # assign a CRS
# look at CRS
crs(plot.locationsSp_HARV)
# first, convert the data.frame to spdf
r <- SpatialPointsDataFrame(plot.locations_HARV[,1:2],
plot.locations_HARV)
# second, assign the CRS in one of two ways
r <- crs("+proj=utm +zone=18 +datum=WGS84 +units=m +no_defs
+ellps=WGS84 +towgs84=0,0,0" )
crs(r) <- "+proj=utm +zone=18 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0"
# plot spatial object
plot(plot.locationsSp_HARV,
main="Map of Plot Locations")
# create boundary object
aoiBoundary_HARV <- readOGR("NEON-DS-Site-Layout-Files/HARV/",
"HarClip_UTMZ18")
# plot Boundary
plot(aoiBoundary_HARV,
main="AOI Boundary\nNEON Harvard Forest Field Site")
# add plot locations
plot(plot.locationsSp_HARV,
pch=8, add=TRUE)
# no plots added, why? CRS?
# view CRS of each
crs(aoiBoundary_HARV)
crs(plot.locationsSp_HARV)
# view extent of each
extent(aoiBoundary_HARV)
extent(plot.locationsSp_HARV)
plot(extent(plot.locationsSp_HARV),
col="purple",
xlab="easting",
ylab="northing", lwd=8,
main="Extent Boundary of Plot Locations \nCompared to the AOI Spatial Object",
ylim=c(4712400,4714000)) # extent the y axis to make room for the legend
plot(extent(aoiBoundary_HARV),
add=TRUE,
lwd=6,
col="springgreen")
legend("bottomright",
#inset=c(-0.5,0),
legend=c("Layer One Extent", "Layer Two Extent"),
bty="n",
col=c("purple","springgreen"),
cex=.8,
lty=c(1,1),
lwd=6)
plotLoc.extent <- extent(plot.locationsSp_HARV)
plotLoc.extent
# grab the x and y min and max values from the spatial plot locations layer
xmin <- plotLoc.extent@xmin
xmax <- plotLoc.extent@xmax
ymin <- plotLoc.extent@ymin
ymax <- plotLoc.extent@ymax
# adjust the plot extent using x and ylim
plot(aoiBoundary_HARV,
main="NEON Harvard Forest Field Site\nModified Extent",
border="darkgreen",
xlim=c(xmin,xmax),
ylim=c(ymin,ymax))
plot(plot.locationsSp_HARV,
pch=8,
col="purple",
add=TRUE)
# add a legend
legend("bottomright",
legend=c("Plots", "AOI Boundary"),
pch=c(8,NA),
lty=c(NA,1),
bty="n",
col=c("purple","darkgreen"),
cex=.8)
# write a shapefile
writeOGR(plot.locationsSp_HARV, getwd(),
"PlotLocations_HARV", driver="ESRI Shapefile")
set.seed(212)
Data = matrix(rnorm(60), 30, 2)
Data <- cbind(geocoded$lat, geocoded$long)
Data
View(Data)
Data <- as.data.frame(Data)
Data$V1 <- as.numeric(as.character(Data$V1))
Data$V2 <- as.numeric(as.character(Data$V2))
#############################
center_scale <- function(x) {
scale(x, scale = FALSE)
}
# apply it
center_scale(Data)
#############################
center_apply <- function(x) {
apply(x, 2, function(y) y - mean(y))
}
# apply it
center_apply(Data)
Data = matrix(rnorm(60), 30, 2)
Data <- cbind(geocoded$lat, geocoded$long)
Data
dim(Data)
Data <- as.data.frame(Data)
Data$V1 <- as.numeric(as.character(Data$V1))
Data$V2 <- as.numeric(as.character(Data$V2))
#############################
center_scale <- function(x) {
scale(x, scale = FALSE)
}
# apply it
center_scale(Data)
#############################
center_apply <- function(x) {
apply(x, 2, function(y) y - mean(y))
}
# apply it
center_apply(Data)
############################
# center with 'sweep()'
center_sweep <- function(x, row.w = rep(1, nrow(x))/nrow(x)) {
get_average <- function(v) sum(v * row.w)/sum(row.w)
average <- apply(x, 2, get_average)
sweep(x, 2, average)
}
# apply it
center_sweep(Data)
############################################
# RECOMENDADO
############################################
## center with 'colMeans()'
center_colmeans <- function(x) {
xcenter = colMeans(x)
x - rep(xcenter, rep.int(nrow(x), ncol(x)))
}
# apply it
center_colmeans(Data)
####################################
# center matrix operator
center_operator <- function(x) {
n = nrow(x)
ones = rep(1, n)
H = diag(n) - (1/n) * (ones %*% t(ones))
H %*% x
}
# apply it
center_operator(Data)
# mean subtraction
center_mean <- function(x) {
ones = rep(1, nrow(x))
x_mean = ones %*% t(colMeans(x))
x - x_mean
}
# apply it
center_mean(Data)
#https://cran.r-project.org/web/packages/contoureR/contoureR.pdf
library(contoureR)
library(ggplot2)
x_coord <- c(16.48438,  24.74609, 17.49512,  22.59277, 16.48438)
y_coord <- c(59.736328125, 55.0341796875, 55.1220703125, 61.142578125, 59.736328125)
set.seed(1)
x = runif(100)
y = runif(100)
xy <- cbind(x, y)
xy <- as.data.frame(xy)
ch1 = convexHullAM_Indexes(xy$x,xy$y, includeColinear=FALSE,zeroBased = FALSE)
ggplot(data.frame(x,y),aes(x,y)) +
geom_point() +
geom_path(data=data.frame(x,y)[ch1,],colour="red")
xy
ch1 = convexHullAM_Indexes(xy$x,xy$y, includeColinear=FALSE,zeroBased = FALSE)
ggplot(data.frame(x,y),aes(x,y)) +
geom_point() +
geom_path(data=data.frame(x,y)[ch1,],colour="red")
ch1
x <- x_coord
y <- y_coord
ch = convexHullAM_Indexes(x,y,includeColinear=FALSE,zeroBased = FALSE)
ggplot(data.frame(x,y),aes(x,y)) +
geom_point() +
geom_path(data=data.frame(x,y)[ch,],colour="red")
ch
library(sp)
Sr1 = Polygon(cbind(c(2,4,4,1,2),c(2,3,5,4,2)))
Sr2 = Polygon(cbind(c(5,4,2,5),c(2,3,2,2)))
Sr3 = Polygon(cbind(c(4,4,5,10,4),c(5,3,2,5,5)))
Sr4 = Polygon(cbind(c(5,6,6,5,5),c(4,4,3,3,4)), hole = TRUE)
Srs1 = Polygons(list(Sr1), "s1")
Srs2 = Polygons(list(Sr2), "s2")
Srs3 = Polygons(list(Sr3, Sr4), "s3/4")
SpP = SpatialPolygons(list(Srs1,Srs2,Srs3), 1:3)
plot(SpP, col = 1:3, pbg="white")
Sr1 = Polygon(cbind(c(2,4,4,1,2),c(2,5,3,4,2)))
Sr2 = Polygon(cbind(c(5,4,2,5),c(2,3,2,2)))
Sr3 = Polygon(cbind(c(4,4,5,10,4),c(5,3,2,5,5)))
Sr4 = Polygon(cbind(c(5,6,6,5,5),c(4,4,3,3,4)), hole = TRUE)
Srs1 = Polygons(list(Sr1), "s1")
Srs2 = Polygons(list(Sr2), "s2")
Srs3 = Polygons(list(Sr3, Sr4), "s3/4")
SpP = SpatialPolygons(list(Srs1,Srs2), 1:2)
plot(SpP, col = 1:3, pbg="white")
data(wrld_simpl)
plot(wrld_simpl, col='white', bg='grey9', border=NA)
limx <- c(-6,1)
limy <- c(49,60)
plot(wrld_simpl, xlim=limx, ylim=limy, col='white', bg='grey9', border=NA)
# Apply RDP algorithm with distance variable = 0.4 degrees
wrld_RDP <- gSimplify(wrld_simpl, 0.4, topologyPreserve=TRUE)
plot(wrld_RDP, xlim=limx, ylim=limy, col='white', bg='grey9', border=NA)
x_coord <- c(16.48438,  17.49512,  24.74609, 22.59277, 16.48438)
y_coord <- c(59.736328125, 55.1220703125, 55.0341796875, 61.142578125, 59.736328125)
x_coorda <- c(16.48438,  24.74609, 17.49512,  22.59277, 16.48438)
y_coorda <- c(59.736328125, 55.0341796875, 55.1220703125, 61.142578125, 59.736328125)
xym <- cbind(x_coord, y_coord)
xym
p = Polygon(xym)
ps = Polygons(list(p),1)
sps = SpatialPolygons(list(ps))
plot(sps)
lng <- c(-51.74768, -51.74735, -51.74768, -51.74735)
lat <- c(-0.1838690, -0.1840984, -0.1840993, -0.1838682)
data <- data.frame(lng, lat)
area <- geosphere::areaPolygon(x = data)
area
# Contour Lines for a Function, Constrained to a limited domain
# Example of the provision of non-regular data
library(contoureR)
library(ggplot2)
a  = -2; b = +2; n  = 150
x  = runif(n*n,a,b)
y  = runif(n*n,a,b)
df = data.frame(x,y)
df$z   = with(df,-x*y*exp(-x^2-y^2))
df.sub = subset(df,x^2 + y^2 < 2)
df.cnt = getContourLines(df.sub,nlevels=20)
ggplot(data=df.cnt,aes(x,y,group=Group,colour=z)) + geom_path() + theme_bw()
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_162.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
library(rJava)
dyn.load()
dyn.load(rJava)
library(rJava)
library(rJava)
install.packages('rJava')
library(rJava)
R --quiet -e 'install.packages("rJava", type="source", repos="http://cran.us.r-project.org"
library(rJava)
